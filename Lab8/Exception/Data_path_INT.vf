////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Data_path_INT.vf
// /___/   /\     Timestamp : 05/14/2019 15:12:43
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath C:/org/Exp08/Exception/Code -intstyle ise -family kintex7 -verilog C:/org/Exp08/Exception/Data_path_INT.vf -w C:/org/Exp08/Exception/Code/Data_path_INT.sch
//Design Name: Data_path_INT
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module alu_MUSER_Data_path_INT(A, 
                               ALU_operation, 
                               B, 
                               overflow, 
                               res, 
                               zero);

    input [31:0] A;
    input [2:0] ALU_operation;
    input [31:0] B;
   output overflow;
   output [31:0] res;
   output zero;
   
   wire N0;
   wire [32:0] S;
   wire [31:0] XLXN_2;
   wire [31:0] XLXN_3;
   wire [31:0] XLXN_17;
   wire [31:0] XLXN_19;
   wire [31:0] XLXN_22;
   wire [31:0] XLXN_23;
   wire [31:0] XLXN_24;
   wire [31:0] res_DUMMY;
   
   assign res[31:0] = res_DUMMY[31:0];
   ADC32  ADC_32 (.A(A[31:0]), 
                 .B(XLXN_3[31:0]), 
                 .C0(ALU_operation[2]), 
                 .S(S[32:0]));
   and32  ALU_U1 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_17[31:0]));
   xor32  ALU_U3 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_22[31:0]));
   nor32  ALU_U4 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_23[31:0]));
   srl32  ALU_U5 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_24[31:0]));
   xor32  ALU_U7 (.A(XLXN_2[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_3[31:0]));
   or_bit_32  ALU_Zero (.A(res_DUMMY[31:0]), 
                       .o(zero));
   MUX8T1_32  MUXALU (.I0(XLXN_17[31:0]), 
                     .I1(XLXN_19[31:0]), 
                     .I2(S[31:0]), 
                     .I3(XLXN_22[31:0]), 
                     .I4(XLXN_23[31:0]), 
                     .I5(XLXN_24[31:0]), 
                     .I6(S[31:0]), 
                     .I7({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, S[32]}), 
                     .s(ALU_operation[2:0]), 
                     .o(res_DUMMY[31:0]));
   SignalExt_32  SIignal1_32 (.S(ALU_operation[2]), 
                             .So(XLXN_2[31:0]));
   GND  XLXI_12 (.G(N0));
   or32  XLXI_13 (.A(A[31:0]), 
                 .B(B[31:0]), 
                 .res(XLXN_19[31:0]));
endmodule
`timescale 1ns / 1ps

module Data_path_INT(ALUSrc_B, 
                     ALU_Control, 
                     Branch, 
                     clk, 
                     DatatoReg, 
                     Data_in, 
                     eret, 
                     inst_field, 
                     INT, 
                     Jal, 
                     RegDst, 
                     RegWrite, 
                     rst, 
                     ALU_out, 
                     Data_out, 
                     overflow, 
                     PC_out, 
                     zero);

    input ALUSrc_B;
    input [2:0] ALU_Control;
    input [1:0] Branch;
    input clk;
    input [1:0] DatatoReg;
    input [31:0] Data_in;
    input eret;
    input [25:0] inst_field;
    input INT;
    input Jal;
    input RegDst;
    input RegWrite;
    input rst;
   output [31:0] ALU_out;
   output [31:0] Data_out;
   output overflow;
   output [31:0] PC_out;
   output zero;
   
   wire [31:0] Imm;
   wire N0;
   wire [31:0] pc_4;
   wire V5;
   wire [31:0] XLXN_2;
   wire [31:0] XLXN_4;
   wire [4:0] XLXN_5;
   wire [31:0] XLXN_7;
   wire [31:0] XLXN_41;
   wire [31:0] XLXN_42;
   wire [4:0] XLXN_59;
   wire [31:0] XLXN_61;
   wire [31:0] ALU_out_DUMMY;
   wire [31:0] Data_out_DUMMY;
   wire [31:0] PC_out_DUMMY;
   
   assign ALU_out[31:0] = ALU_out_DUMMY[31:0];
   assign Data_out[31:0] = Data_out_DUMMY[31:0];
   assign PC_out[31:0] = PC_out_DUMMY[31:0];
   Regs  XLXI_1 (.clk(clk), 
                .L_S(RegWrite), 
                .rst(rst), 
                .R_addr_A(inst_field[25:21]), 
                .R_addr_B(inst_field[20:16]), 
                .Wt_addr(XLXN_5[4:0]), 
                .Wt_data(XLXN_4[31:0]), 
                .rdata_A(XLXN_7[31:0]), 
                .rdata_B(Data_out_DUMMY[31:0]));
   REG32  XLXI_2 (.CE(V5), 
                 .clk(clk), 
                 .D(XLXN_61[31:0]), 
                 .rst(rst), 
                 .Q(PC_out_DUMMY[31:0]));
   alu_MUSER_Data_path_INT  XLXI_3 (.A(XLXN_7[31:0]), 
                                   .ALU_operation(ALU_Control[2:0]), 
                                   .B(XLXN_2[31:0]), 
                                   .overflow(overflow), 
                                   .res(ALU_out_DUMMY[31:0]), 
                                   .zero(zero));
   MUX2T1_32  XLXI_4 (.I0(Data_out_DUMMY[31:0]), 
                     .I1(Imm[31:0]), 
                     .s(ALUSrc_B), 
                     .o(XLXN_2[31:0]));
   Ext_32  XLXI_5 (.imm_16(inst_field[15:0]), 
                  .Imm_32(Imm[31:0]));
   MUX2T1_5  XLXI_7 (.I0(XLXN_59[4:0]), 
                    .I1(inst_field[15:11]), 
                    .s(RegDst), 
                    .o(XLXN_5[4:0]));
   add_32  XLXI_9 (.a(PC_out_DUMMY[31:0]), 
                  .b({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, V5, N0, 
         N0}), 
                  .c(pc_4[31:0]));
   add_32  XLXI_10 (.a(pc_4[31:0]), 
                   .b({Imm[29:0], N0, N0}), 
                   .c(XLXN_41[31:0]));
   VCC  XLXI_13 (.P(V5));
   GND  XLXI_14 (.G(N0));
   MUX4T1_32  XLXI_15 (.I0(ALU_out_DUMMY[31:0]), 
                      .I1(Data_in[31:0]), 
                      .I2({inst_field[15:0], N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0}), 
                      .I3(pc_4[31:0]), 
                      .s(DatatoReg[1:0]), 
                      .o(XLXN_4[31:0]));
   MUX2T1_5  XLXI_17 (.I0(inst_field[20:16]), 
                     .I1({V5, V5, V5, V5, V5}), 
                     .s(Jal), 
                     .o(XLXN_59[4:0]));
   MUX4T1_32  XLXI_18 (.I0(pc_4[31:0]), 
                      .I1(XLXN_41[31:0]), 
                      .I2({pc_4[31:28], inst_field[25:0], N0, N0}), 
                      .I3(XLXN_7[31:0]), 
                      .s(Branch[1:0]), 
                      .o(XLXN_42[31:0]));
   Decode_Int  XLXI_19 (.clk(clk), 
                       .eret(eret), 
                       .INT(INT), 
                       .pc_next(XLXN_42[31:0]), 
                       .reset(rst), 
                       .pc(XLXN_61[31:0]));
endmodule
